<!--
 *  CodeMirror Widget
 *  
 *  MIT License
 *  
 *  (c) Copyright 2019-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
-->

<class name="Runtime.Widget.CodeMirror.CodeMirror">

<use name="Runtime.Reference" />
<use name="Runtime.Web.Messages.ValueChangeMessage" />


<style global="true">
.widget_codemirror{
	height: 100%;
	.cm-editor{
		outline: none;
	}
}
.widget_codemirror.border{
	border: 1px solid var(--widget-color-border);
}
</style>


<template name="render">
	<div class="widget_codemirror" class={{ this.class }} @ref="codemirror"></div>
</template>


<script>

props Reference reference = null;
props string language = null;
props string height = "";
props string value = "";
props int timeout = 500;
props var readonly = false;
bool is_instance_created = false;
var change_timer = null;
var instance = null;
string old_value = "";


/**
 * Returns value
 */
string getValue() => this.instance.state.doc.toString();


/**
 * Component mounted
 */
void onMounted()
{
	if (this.reference) this.reference.setValue(this);
	
	#ifcode JAVASCRIPT then
	this.nextTick
	(
		() => {
			var view = Runtime.rtl.require("@codemirror/view");
			var state = Runtime.rtl.require("@codemirror/state");
			var commands = Runtime.rtl.require("@codemirror/commands");
			var language = Runtime.rtl.require("@codemirror/language");
			
			var extensions = [
				commands.history(),
				view.lineNumbers(),
				view.keymap.of([commands.indentWithTab]),
				language.indentUnit.of("\t"),
			];
			
			/* Set readonly */
			if (this.readonly == "true" || this.readonly == "1")
			{
				extensions.push(state.EditorState.readOnly.of(true));
			}
			
			/* On change listener */
			extensions.push(view.EditorView.updateListener.of((update) => {
				if (update.docChanged)
				{
					if (this.change_timer != null)
					{
						window.clearTimeout(this.change_timer);
						this.change_timer = null;
					}
					this.change_timer = setTimeout(
						this.onContentChange.bind(this), this.timeout
					);
				}
			}));
			
			/* Create instance */
			var codemirror_ref = this.getRef("codemirror");
			this.instance = new view.EditorView({
				extensions: extensions,
				parent: codemirror_ref
			});
			this.is_instance_created = true;
			
			/* Set height */
			if (this.height != "")
			{
				var dom = this.instance.dom;
				var scroller = dom.querySelector('.cm-scroller');
				var content = dom.querySelector('.cm-content');
				var gutter = dom.querySelector('.cm-gutter');
				dom.style.minHeight = this.height;
				dom.style.maxHeight = this.height;
				content.style.minHeight = this.height;
				gutter.style.minHeight = this.height;
				scroller.style.minHeight = this.height;
			}
			
			/* Set value */
			let value = this.value;
			if (value)
			{
				this.instance.dispatch({
					changes: {from: 0, to: this.instance.state.doc.length, insert: value}
				});
				this.old_value = value;
			}
			else
			{
				this.instance.dispatch({
					changes: {from: 0, to: this.instance.state.doc.length, insert: ""}
				});
				this.old_value = "";
			}
		}
	);
	#endif
}


/**
 * On code change
 */
void onContentChange()
{
	string value = this.getValue();
	
	/* Send value change */
	this.emit("valueChange", new ValueChangeMessage{
		"value": value,
		"old_value": this.old_value,
		"data": this.data,
	});
	
	/* Set old value */
	this.old_value = value;
	this.change_timer = null;
}


/**
 * On updated
 */
void onUpdated()
{
	if (this.is_instance_created and this.old_value != this.value)
	{
		#ifcode JAVASCRIPT then
		this.instance.dispatch({
			changes: {from: 0, to: this.instance.state.doc.length, insert: this.value}
		});
		#endif
	}
}


</script>

</class>