<!--
 *  CodeMirror Assets
 *  
 *  MIT License
 *  
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
-->

<class name="Runtime.Widget.CodeMirror.CodeMirror">

<style>
.widget_textarea{
	display: none;
}
</style>


<template name="render">
	<div class="widget_codemirror">
		<textarea class="widget_textarea" @ref="input">{{ this.value }}</textarea>
	</div>
</template>


<script>

props string mode = "htmlmixed";
props string min_height = "500px";
props string value = "";
props var readonly = false;
bool is_instance_created = false;
var change_timer = null;
var instance = null;
string old_value = "";


/**
 * Component mounted
 */
void onMounted()
{
	#ifcode JAVASCRIPT then
	setTimeout
	(
		() => {
			
			var readonly = this.readonly;
			if (readonly == "true" || readonly == "1") readonly = true;
			else readonly = false;
			
			var input = this.getRef("input");
			this.instance = window.CodeMirror.fromTextArea
			(
				input,
				{
					lineNumbers: true,
					lineWrapping: true,
					mode: this.mode,
					matchBrackets: true,
					tabSize: 2,
					readonly: readonly,
				}
			);
			
			this.instance.refresh();
			this.is_instance_created = true;
			
			/* Set value */
			let value = this.value;
			if (value)
			{
				this.instance.getDoc().setValue(value);
				this.old_value = value;
			}
			else
			{
				this.instance.getDoc().setValue("");
				this.old_value = "";
			}
			
			/* onChange */
			this.instance.on("change", (code) => {
				if (this.change_timer == null)
				{
					this.change_timer = setTimeout(this.onCodeChanged.bind(this), 100);
				}
			});
			
			/* Extra keys */
			this.instance.setOption("extraKeys", {
				Tab: function(cm)
				{
					var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
					cm.replaceSelection(spaces);
				}
			});
			
			/* Set min height */
			this.instance.display.wrapper.style.minHeight = this.min_height;
			
			/* Set full size */
			/* this.instance.setSize("100%", "100%"); */
			
		}, 10
	);
	#endif
}


/**
 * On code changed
 */
void onCodeChanged()
{
	this.change_timer = null;
	string value = this.instance.getDoc().getValue();
	this.old_value = value;
	this.emit("valueChanged", value);
}


/**
 * On updated
 */
void onUpdated()
{
	if (this.is_instance_created and this.old_value != this.value)
	{
		#ifcode JAVASCRIPT then
		setTimeout
		(
			() => {
				this.instance.getDoc().setValue(this.value);
			},
			10
		);
		#endif
	}
}


</script>

</class>