<!--
 *  CodeMirror Assets
 *  
 *  MIT License
 *  
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
-->

<class name="Runtime.Widget.CodeMirror.CodeMirror">


<template name="render">
	<div class="input" @ref="input" />
</template>


<script>

props string value = "";
bool is_code_created = false;
var change_timer = null;
var code = null;


/**
 * Component mounted
 */
void onMounted()
{
	#ifcode JAVASCRIPT then
	setTimeout
	(
		() => {
			var input = this.getRef("input");
			this.code = window.CodeMirror
			(
				input,
				{
					lineNumbers: true,
					mode: "htmlmixed",
					matchBrackets: true,
					tabSize: 2,
				}
			);
			this.is_code_created = true;
			
			/* onChange */
			this.code.on("change", (code) => {
				if (this.change_timer == null)
				{
					this.change_timer = setTimeout(this.onCodeChanged.bind(this), 100);
				}
			});
			
			this.code.setOption("extraKeys", {
				Tab: function(cm)
				{
					var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
					cm.replaceSelection(spaces);
				}
			});
			
			/* Set full size */
			/* this.code.setSize("100%", "100%"); */
			
		}, 10
	);
	#endif
}


/**
 * On code changed
 */
void onCodeChanged()
{
	this.change_timer = null;
	string value = this.code.getDoc().getValue();
	this.old_value = value;
	this.emit("changed", value);
}


/**
 * On updated
 */
void onUpdated()
{
	if (this.is_code_created and this.old_value != this.value)
	{
		#ifcode JAVASCRIPT then
		setTimeout
		(
			() => { this.code.getDoc().setValue(this.value); },
			10
		);
		#endif
	}
}


</script>

</class>